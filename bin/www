#!/usr/bin/env node

// Module dependencies.
const app = require('../app');
const debug = require('debug')('pangolin:server');
const http = require('http');
const socketIO = require('socket.io');
const authentication = require('../authentication');
const clientManager = require('../socket/clientManager');
const chatManager = require('../socket/chatManager')();
const makeHandlers = require('../socket/handlers');
const handleConnect = require('../socket/handleConnect');


// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server and WebSocket server.
var server = http.createServer(app);

const socket = socketIO(server);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

socket.use((socket, next) => authentication.verifyUser(socket, next));
// Listen to WebSocket events
socket.on('connection', function (socket) {

  handleConnect(socket, clientManager, (err, res) => {
    if (err) {
      console.log('socket connection error', err);
      socket.disconnect(true);
    }
    else {
      const _id = res._id;
      const username = res.username;

      const {
        handleAddContact,
        handleUploadPicture,
        handleChangeName,
        handleFirstMessage,
        handleMessage,
        handleAddPersonToChat,
        handleResetUnseenMsgs,
        handleLogout,
        handleDisconnect
      } = makeHandlers(_id, username, socket, clientManager, chatManager);

      socket.on('ADD_CONTACT', handleAddContact);
      socket.on('UPLOAD_PICTURE', handleUploadPicture);
      socket.on('CHANGE_NAME', handleChangeName);

      socket.on('FIRST_MESSAGE', handleFirstMessage);
      socket.on('MESSAGE', handleMessage);
      socket.on('ADD_PERSON_TO_CHAT', handleAddPersonToChat);
      socket.on('RESET_UNSEEN_MESSAGES', handleResetUnseenMsgs);

      socket.on('LOGOUT', handleLogout);

      socket.on('disconnect', function () {
        console.log('client disconnect...', socket.id);
        handleDisconnect();
      });

      socket.on('error', function (err) {
        console.log('received error from client:', socket.id);
        console.log(err);
      });

    }
  });

});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
